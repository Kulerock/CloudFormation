AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to deploy VPC and webserver

# VPC & Availability Zones
Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
  Environment:
    Type: String
    Default: "Prod"

# Mapping
Mappings:
  RegionMap:
    eu-north-1:
      az1: eu-north-1a
      az2: eu-north-1b

# Resources
Resources:
  # IAM Role for SSM
  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "SSMAccessRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref SSMRole

  # Security Group & dynamic ports
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP
      VpcId:
        Fn::ImportValue: !Sub "${Environment}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: WebServer-Highly-Available-1
      LaunchTemplateData:
        ImageId: ami-097c5c21a18dc59ea
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !GetAtt SecurityGroup.GroupId
            DeleteOnTermination: true
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource AutoScalingGroup --region ${AWS::Region}

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - cfn-hup
            - nginx-download
            - website-launch
        cfn-hup: #чтобы обновлялся кэш метадаты в инстансе
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: "000400"
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.AutoScalingGroup.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=AutoScalingGroup
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        nginx-download:
          commands:
            update:
              command: "yum -y update"
            download:
              command: "yum -y install nginx"
        website-launch:
          commands:
            get_ip:
              command: "myip=`curl http://169.254.169.254/latest/meta-data/local-ipv4`"
          files:
            "/var/www/html/index.html":
              content: !Sub |
                [main]
                <html>
                <head><title>Hi</title></head>
                <body>
                <h1>Launched stack ${AWS::StackName} in  ${AWS::Region} AWS Region.</h1>
                <h2>My ip is - $myip </h2>
                </body>
                </html>
              mode: "000400"
              owner: root
              group: root
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${Environment}-PublicSubnetA"
        - Fn::ImportValue: !Sub "${Environment}-PublicSubnetB"
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: "1"
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: WebServer-in-ASG
          PropagateAtLaunch: true
        - Key: Owner
          Value: Kate
          PropagateAtLaunch: true

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${Environment}-PublicSubnetA"
        - Fn::ImportValue: !Sub "${Environment}-PublicSubnetB"
      # AvailabilityZones:
      #   - !FindInMap [RegionMap, !Ref AWS::Region, az1]
      #   - !FindInMap [RegionMap, !Ref AWS::Region, az2]
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        Interval: 10
        Timeout: 5
        UnhealthyThreshold: 2
        HealthyThreshold: 2
      SecurityGroups:
        - !Ref SecurityGroup

# Output
Outputs:
  WebLoadBalancerURL:
    Description: The URL of the web load balancer
    Value: !GetAtt LoadBalancer.DNSName
